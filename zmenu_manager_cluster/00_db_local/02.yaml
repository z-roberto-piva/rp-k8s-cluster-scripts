apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: postgres-local
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: psql
          env:
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: pg-secret
                  key: POSTGRES_DATABASE
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: pg-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pg-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: pg-data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DATABASE\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DATABASE\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 6
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
    - metadata:
        name: pg-data
      spec:
        accessModes: ["ReadWriteOnce"]
        # storageClassName: standard   # <-- opzionale: imposta la tua SC, oppure lascia commentato per usare quella di default
        resources:
          requests:
            storage: 20Gi
            